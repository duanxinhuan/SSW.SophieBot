# Sophie Bot Frontend deployment
name: SophieBotCICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [DevOps]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
env:
  SourceDir: "src/SSW.SophieBot/SSWSophieBot"
  BotName: ${{ secrets.BotName }}
  MicrosoftAppId: ${{ secrets.MICROSOFTAPPID }}
  MicrosoftAppPassword: ${{ secrets.MICROSOFTAPPPASSWORD }}
  ResourceGroupName: ${{ secrets.RESOURCEGROUPNAME }}
  WebAppName: ${{ secrets.WebAppName }}
  WebAppPublishProfile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_SOPHIEBOT }}
  # LUIS
  LuisAuthoringRegion: ${{ secrets.LUIS_AUTHORING_REGION }}
  LuisAuthoringEndpoint: ${{ secrets.LUIS_AUTHORING_ENDPOINT }}
  LuisAuthoringKey: ${{ secrets.LUIS_AUTHORING_KEY }}
  LuisEndpoint: ${{ secrets.LUIS_ENDPOINT }}
  LuisEndpointKey: ${{ secrets.LUIS_ENDPOINT_KEY }}

jobs:
  # This workflow contains a single job called "build"
  setup:
    name: Set up tool sets ðŸ› 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Set up Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Set up Bot Framework CLI
        run: |
          npm install -g @microsoft/botframework-cli

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.x"

  build-and-deploy-luis:
    name: Build and Deploy LUIS models
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Prepare working folders
        shell: pwsh
        run: |
          echo "generated dir is ${generatedDirectory}"
          echo "outputDirectory dir is ${outputDirectory}"
          
          # Clean and recreate the generated directory
          if (Test-Path ${generatedDirectory})
          {
            Remove-Item -Path ${generatedDirectory} -Force -Recurse
          }

          New-Item -Path /. -name ${outputDirectory} -ItemType "directory"
        with:
          generatedDirectory: ${{env.SourceDir)}}/generated
          outputDirectory: ${{env.SourceDir)}}/generated/interruption

      # - name: Cross train LU models
      #   shell: pwsh
      #   run: |
      #     $sourceDirectory = "$($ENV.SourceDir)"
      #     $outputDirectory = "$($ENV.SourceDir)/generated/interruption"

      #     bf luis:cross-train --in ${sourceDirectory} --out ${outputDirectory} --config ${sourceDirectory}/settings/cross-train.config.json --force

      #     # List generated files for checking purpose
      #     cd ${outputDirectory}
      #     ls -R
